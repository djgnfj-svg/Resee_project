"""
Django settings for Resee project.

Generated by 'django-admin startproject' using Django 4.0.5.

For more information on this file, see
https://docs.djangoproject.com/en/4.0/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.0/ref/settings/
"""

import os, json, sys, datetime, pymysql

from pathlib import Path
from django.core.exceptions import ImproperlyConfigured

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent
# 추후 구글 로그인시 체인지


STATE = 'random_string'

secret_file = os.path.join(BASE_DIR, 'secrets.json')
SECRET_BASE_FILE = os.path.join(BASE_DIR, 'secrets.json')
with open(secret_file) as f:
    secrets = json.loads(f.read())
secrets = json.loads(open(SECRET_BASE_FILE).read())


for key, value in secrets.items():
    setattr(sys.modules[__name__], key, value)

def get_secret(setting):
    """비밀 변수를 가져오거나 명시적 예외를 반환한다."""
    try:
        return secrets[setting]
    except KeyError:
        error_msg = "Set the {} environment variable".format(setting)
        raise ImproperlyConfigured(error_msg)


# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = get_secret("SECRET_KEY")

ENV = get_secret("DEV")
if ENV == 'dev':
    DEBUG = False
else:
    DEBUG = True

if ENV == 'dev':
    BASE_FRONTEND_URL = "https://www.reseep.com/login/?signup=True"
else:
    BASE_FRONTEND_URL = "http://localhost:3000/login/?signup=True"


if ENV == 'dev':
    ALLOWED_HOSTS = ["reseep.com", 'reseep.com:8000',"www.reseep.com", 'www.reseep.com:8000']
else :
    ALLOWED_HOSTS = ["*"]

# Application definition
AUTH_USER_MODEL = 'accounts.User'
DEFAULT_HTTP_PROTOCOL = "https"

INSTALLED_APPS = [
    #cors
    'corsheaders',
    # defulat
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sites',
    
    #app
    'books',
    'posts',
    'accounts',
    
    # swagger
    'drf_yasg',
    
    #rest_framework
	'rest_framework',
    'rest_framework.authtoken',
    'rest_framework_simplejwt',
    'rest_framework_simplejwt.token_blacklist',
    #dj-rest-autj
    'dj_rest_auth',
    'dj_rest_auth.registration',
    #all auth
	"allauth",
	"allauth.account",
	"allauth.socialaccount",
	"allauth.socialaccount.providers.auth0",
	"allauth.socialaccount.providers.google",
]
#CORS
CORS_ORIGIN_WHITELIST = [
    "http://localhost:3000",
    "http://127.0.0.1:8000",

    "https://reseep.com",
    "https://reseep.com:8000",
    "https://www.reseep.com",
    "https://www.reseep.com:8000"
]

CORS_ALLOW_CREDENTIALS = True

MIDDLEWARE = [
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'Resee.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [
            os.path.join(BASE_DIR, 'templates'), # 경로 변경
        ],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

#경로 추가
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, '..', 'frontend', 'build', 'static'),
]

STATIC_URL = 'static/'
STATIC_ROOT = os.path.join(BASE_DIR,'static')

MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

WSGI_APPLICATION = 'Resee.wsgi.application'


# Database
# https://docs.djangoproject.com/en/4.0/ref/settings/#databases

pymysql.install_as_MySQLdb()

if ENV == "dev":
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.mysql',
            'NAME': get_secret("DB_NAME"),
            'USER' : get_secret("DB_USER"),
            'PASSWORD' : get_secret("DB_PASSWORD"),
            'HOST' : get_secret("DB_HOST"),
            'PORT' : get_secret("DB_PORT"),
            'OPTIONS' : {
                'init_command' : "SET sql_mode='STRICT_TRANS_TABLES'"
            }
        }
    }
else:
    DATABASES = {
        'default': {
            'ENGINE': 'django.db.backends.sqlite3',
            'NAME': BASE_DIR / 'db.sqlite3',
        }
    }


# Password validation
# https://docs.djangoproject.com/en/4.0/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/4.0/topics/i18n/

LANGUAGE_CODE = 'ko-KR'

TIME_ZONE = 'Asia/Seoul'

USE_I18N = True

USE_TZ = True

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

# Swagger Setting
SWAGGER_SETTINGS = {
   'SECURITY_DEFINITIONS': {
        'Bearer': {
            'type': 'apiKey',
            'name': 'Authorization',
            'in': 'header'
        }
    }
}

# 배포용
if ENV == "dev":
    SIMPLE_JWT = {
        #todo : access_token 배포할떄 바꾸기
        'ACCESS_TOKEN_LIFETIME': datetime.timedelta(hours=2),
        'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7),
        'ROTATE_REFRESH_TOKENS': False,
        'BLACKLIST_AFTER_ROTATION': True,
    }
    REST_FRAMEWORK = {
        'DEFAULT_PAGINATION_CLASS' : 'rest_framework.pagination.PageNumberPagination',
        'PAGE_SIZE' : 5,

        'DEFAULT_PERMISSION_CLASSES': (
            # 'rest_framework.permissions.AllowAny', # 누구나 접근 가능
            'rest_framework.permissions.IsAuthenticated', # 인증된 사용자만 접근 가능
            # 'rest_framework.permissions.IsAdminUser', # 관리자만 접근 가능
        ),
        
        'DEFAULT_AUTHENTICATION_CLASSES': (
            # 'rest_framework.authentication.SessionAuthentication',
            'rest_framework_simplejwt.authentication.JWTAuthentication', 
        ),
        'DEFAULT_THROTTLE_CLASSES': [
            'rest_framework.throttling.AnonRateThrottle',
            'rest_framework.throttling.UserRateThrottle'
        ],
        'DEFAULT_THROTTLE_RATES': {
            'anon': '20/min',
            'user': '30/min'
        }
    }
    # JWT Options

    REST_USE_JWT = True
    JWT_AUTH_COOKIE  = 'access_token'
    JWT_AUTH_REFRESH_COOKIE = 'refresh_token'
    SITE_ID = 1
    ACCOUNT_UNIQUE_EMAIL = True
    ACCOUNT_AUTHENTICATION_METHOD = 'email'

    #email_option
    ACCOUNT_DEFAULT_HTTP_PROTOCOL = 'https'
    DEFAULT_HTTP_PROTOCOL = 'https'
    EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
    EMAIL_HOST = 'email-smtp.ap-northeast-2.amazonaws.com'
    EMAIL_HOST_USER = get_secret('AWS_SMTP_USER_NAME')
    EMAIL_HOST_PASSWORD = get_secret('AWS_SMTP_PASSWORD')
    EMAIL_USE_TLS = True 
    EMAIL_PORT = get_secret("EMAIL_PORT")
    DEFAULT_FROM_EMAIL = get_secret("DEFAULT_FROM_EMAIL")


    ACCOUNT_EMAIL_REQUIRED = True
    ACCOUNT_CONFIRM_EMAIL_ON_GET = True
    ACCOUNT_EMAIL_SUBJECT_PREFIX = "[Resee]"
    ACCOUNT_EMAIL_VERIFICATION = "mandatory"
    ACCOUNT_EMAIL_CONFIRMATION_EXPIRE_DAYS = 1
    EMAIL_CONFIRMATION_AUTHENTICATED_REDIRECT_URL = '/'
# 개발용
else : 
    SIMPLE_JWT = {
        #todo : access_token 배포할떄 바꾸기
        'ACCESS_TOKEN_LIFETIME': datetime.timedelta(days=7),
        'REFRESH_TOKEN_LIFETIME': datetime.timedelta(days=7),
        'ROTATE_REFRESH_TOKENS': False,
        'BLACKLIST_AFTER_ROTATION': True,
    }
    REST_FRAMEWORK = {
            'DEFAULT_PERMISSION_CLASSES': (
            # 'rest_framework.permissions.IsAuthenticated', # 인증된 사용자만 접근 가능
            # 'rest_framework.permissions.IsAdminUser', # 관리자만 접근 가능
            'rest_framework.permissions.AllowAny', # 누구나 접근 가능
        ),
        
        'DEFAULT_AUTHENTICATION_CLASSES': (
            'rest_framework.authentication.SessionAuthentication',
            'rest_framework_simplejwt.authentication.JWTAuthentication', 
        ),
    }
    # JWT Options
    REST_USE_JWT = True
    JWT_AUTH_COOKIE  = 'access_token'
    JWT_AUTH_REFRESH_COOKIE = 'refresh_token'
    SITE_ID = 1
    ACCOUNT_UNIQUE_EMAIL = True
    ACCOUNT_AUTHENTICATION_METHOD = 'email'
    ACCOUNT_EMAIL_VERIFICATION = "none"
    ACCOUNT_EMAIL_REQUIRED = True

    EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'

## DRF 
REST_AUTH_REGISTER_SERIALIZERS = {
    'REGISTER_SERIALIZER': 'api.Serializers.UserSerializer.CustomRegisterSerializer',
}
